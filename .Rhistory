table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnoem
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5.10))
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- sapply(my_pois, colmeans)
cm <- sapply(my_pois, colMeans)
class(my_pois)
cm<-colMeans(my_pois)
hist(cm)
swirl()
getwd()
library(swirl)
install_from_swirl("Open Intro")
swirl(0)
y<-100
cars$type
sqrt(y)
z<-sqrt(y)
?sqrt
cars
10
range(cars$price)
sum(cars$price)
sum(cars$price)/54
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted <- sort(mpg.midsize)
19
median(mpg.midsize)
summary(cars$mpgCity)
25
mode(cars$mpgCity)
16.9
16
9
1
169
?stem
stem(cars$mpgCity)
16.9
?mode
19
15
17
sd(mpg.midsize)
sd(mpg.midsize)^2
24
q(0)
q()
library(datasets)
data(mtcars)
head(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$cyl + mtcars$wt)
summary(fit)
str(mtcars)
nf <- factor(mtcars$cyl)
nf
fit <- lm(mtcars$mpg ~ factor(mtcars$cyl) + mtcars$wt)
summary(fit)$coeff
fit <- lm(mtcars$mpg ~ factor(mtcars$cyl))
summary(fit)$coeff
fit <- lm(mtcars$mpg ~ factor(mtcars$cyl) + mtcars$wt)
nfit <- lm(mtcars$mpg ~ factor(mtcars$cyl) + mtcars$wt + factor(mtcars$cyl) * mtcars$wt)
anova(fit, nfit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
fit <- lm(y~x)
hatvalues(fit)
dfbetas(fit)
library(swirl)
rm(list=ls())
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility~., swiss)
all <- lm(Fertility~., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Education, swiss$Examination)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all$coeff - efit$coeff
coeff(all) - coeff(efit)
coef(all) - coef(efit)
all$coefficients - efit$coefficients
q()
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays[1,], class)
sapply(InsectSprays, class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)
fit$coef
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3])/ 1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numerics ~ Year, hunger[hunger$Sex=="Female"])
lmF <- lm(Numerics ~ Year, hunger[Sex=="Female"])
lmF <- lm(Numerics[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex * Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm( y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fitno) - coef(fit)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
summary(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.resid(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rm(list = ls())
datasets(mtcars)
library(datasets)
data(mtcars)
dim(mtcars)
head(mtcars)
?mtcars
str(mtcars)
plot(mtcars$mpg, mtcars$am, col = mtcats$am )
plot(mtcars$mpg, mtcars$am, col = mtcars$am )
plot(mtcars$mpg, mtcars$am)
cor(mtcars$mpg, mtcars$am)
fit <- lm(mpg ~ factor(am), mtcars)
plot(fit, which = 1)
summary(fit)
meanfit <- lm(mpg ~ factor(am) - 1, mtcars)
summary(meanfit)
plot(fit, which = 2)
plot(fit, which = 3)
plot(fit, which = 4)
plot(fit, which = 5)
plot(fit, which = 6)
plot(fit, which = 7)
wfit <- lm(mpg ~ ., mtcars)
summary(wfit)$coef
wfit <- lm(mpg ~ factor(am) + wt, mtcars)
summary(wfit)$coef
wfit <- lm(mpg ~ wt + factor(am), mtcars)
summary(wfit)$coef
summary(fit)$coef
summary(fit)
wintfit <- lm(mpg ~ wt * factor(am), mtcars)
summary(wintfit)$coef
summary(wintfit)
wintfit <- lm(mpg ~ wt * factor(am) - 1, mtcars)
summary(wintfit)
sum(is.na(mtcars))
amf <- factor(mtcars$am, levels = c("Auto", "Manual"))
amf <- as.factor(mtcars$am, levels = c("Auto", "Manual"))
amf
amf <- factor(character(mtcars$am), levels = c("Auto", "Manual"))
amf <- factor(as.character(mtcars$am), levels = c("Auto", "Manual"))
amf
amf <- factor(mtcars$am)
amf <- factor((mtcars$am), labels = c("Auto", "Manual"))
mtcars$amf <- factor((mtcars$am), labels = c("Auto", "Manual"))
plot( mtcars$amf, mtcars$mpg)
mtcars$am <- factor((mtcars$am), labels = c("Auto", "Manual"))
str(mtcars)
cyl <- factor(mtcars$cyl)
mtcars$cyl <- factor(mtcars$cyl, labels = c("4 Cyl", "6 Cyl", "8 Cyl"))
gear <- factor(mtcars$gear)
carb <- factor(mtcars$carb)
mtcars$gear <- factor(mtcars$gear, labels = c("3 Gears", "4 Gears", "5 Gears"))
mtcars$carb <- factor(mtcars$carb)
plot( mtcars$cyl, mtcars$mpg)
plot( mtcars$gear, mtcars$mpg)
plot( mtcars$carb, mtcars$mpg)
plot( mtcars$disp, mtcars$mpg)
plot( mtcars$hp, mtcars$mpg)
plot( mtcars$drat, mtcars$mpg)
plot( mtcars$wt, mtcars$mpg)
plot( mtcars$qsec, mtcars$mpg)
plot( mtcars$vs, mtcars$mpg)
anova(fit, wfit)
anova(fit, meanfit)
anova(fit, wintfit)
pairs(mtcars$mpg ~ .)
pairs(mpg ~ ., mtcars)
whole <- lm(mtcars$mpg ~ .)
whole <- lm(mpg ~ ., mtcars)
summary(whole)
cor(mtcars)
data(mtcars)
cor(mtcars)
cor(mtcars)[1,]
plot(factor(mtcars$am), mtcars$mpg)
plot(factor(mtcars$am, labels = c("Auto", "Manual")), mtcars$mpg)
fit <- lm(mpg ~ factor(am), mtcars)
summary(fit)$coef
fit <- lm(mpg ~ factor(am,labels = c("Auto", "Manual")), mtcars)
summary(fit)$coef
fit <- lm(mpg ~ factor(am), mtcars)
summary(fit)
summary(fit)$r.squared
summary(fit)$adjusted.r.squared
summary(fit)$se
summary(fit)$sigma
summary(fit)$adj.r.squared
wfit <- lm(mpg ~ wt + factor(am), mtcars)
summary(wfit)$adj.r.squared
summary(wfit)$coef
wcfit <- lm(mpg ~ wt + cyl + factor(am), mtcars)
summary(wcfit)$coef
summary(wcfit)$adj.r.squared
summary(wfit)
summary(wcfit)
wcdfit <- lm(mpg ~ wt + cyl + disp + factor(am), mtcars)
summary(wcdfit)$adj.r.squared
summary(wcdfit)
wchfit <- lm(mpg ~ wt + cyl + hp + factor(am), mtcars)
summary(wchfit)
wcdfit <- lm(mpg ~ wt + cyl + drat + factor(am), mtcars)
summary(wcdfit)
wcqfit <- lm(mpg ~ wt + cyl + qsec + factor(am), mtcars)
summary(wcqfit)
wcqfit <- lm(mpg ~ wt + cyl + vs + factor(am), mtcars)
summary(wcqfit)
wcqfit <- lm(mpg ~ wt + cyl + gear + factor(am), mtcars)
summary(wcqfit)
wcqfit <- lm(mpg ~ wt + cyl + carb + factor(am), mtcars)
summary(wcqfit)
plot(wcfit, which =1)
wcqfit <- lm(mpg ~ wt + cyl , mtcars)
summary(wcqfit)
wcqfit <- lm(mpg ~ wt + cyl + disp , mtcars)
summary(wcqfit)
wcqfit <- lm(mpg ~ wt + cyl + hp , mtcars)
summary(wcqfit)
wcqfit <- lm(mpg ~ wt + cyl + carb, mtcars)
summary(wcqfit)
wcqfit <- lm(mpg ~ wt + cyl + gear , mtcars)
summary(wcqfit)
plot(wcfit, which =2)
plot(wcfit, which =3)
plot(wcfit, which =4)
plot(wcfit, which =3)
plot(wcfit, which =2)
dfbeats(wcfit)
dfbetas(wcfit)
hatvalues(wcfit)
library(swirl)
swirl()
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
coef(all) - coef(efit)
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(names(InsectSprays), class())
bye()
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female"])
lmF <- lm(Numeric[hunger$Sex=="Female"] ~ Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"] ~ Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex * Year, hunger)
summary(lmInter)
cor(mtcars)
cor(mtcars)[9,]
lmInter <- lm(mpg ~ wt * factor(am), mtcars)
summary(lmInter)
summary(fit)$adj.r.squared
summary(wfit)$adj.r.squared
fit <- lm(mpg ~ factor(am), mtcars)
summary(fit)$coef
wfit <- lm(mpg ~ wt + factor(am), mtcars)
summary(wfit)$coef
summary(lmInter)$coef
31.41 - ( 3.78 * 2 )
31.41 - ( 3.78 * 2 ) + 14.88 - (5.3*2)
plot(lmInterfit, which =1)
plot(lmInter, which =1)
plot(lmInter, which =2)
31.41 - ( 3.78 * 3 ) + 14.88 - (5.3*3)
31.41 - ( 3.78 * 3 )
31.41 - ( 3.78 * 4 )
31.41 - ( 3.78 * 4 ) + 14.88 - (5.3*4)
summary(mtcars$wt)
nfit <- lm(mpg ~ wt + drat, mtcars)
summary(nfit)
nfit <- lm(mpg ~ cyl + drat, mtcars)
summary(nfit)
nfit <- lm(mpg ~ disp + drat, mtcars)
summary(nfit)
nfit <- lm(mpg ~ hp + drat, mtcars)
summary(nfit)
summary(fit)
summary(wfit)
summary(lmInter)
q()
q()
setwd("C:/Users/ASHA/Desktop/Coursera/MLProject")
training <- read.csv("pml-training.csv", header = TRUE, na.strings = c("","NA"))
testing <- read.csv("pml-testing.csv", header = TRUE, na.strings = c("","NA"))
colSums(is.na(training))
summary(training)
library(tree)
library(caret)
library(rpart)
library(randomForest)
summary(training$kurtosis_yaw_belt)
class(training)
prop <- colSums(is.na(training))/19622
table(prop)
training <- training[colSums(is.na(training))/19622 < 0.97]
testing <- testing[colSums(is.na(testing))/19622 < 0.97]
prop <- colSums(is.na(testing))/20
table(prop)
testing <- testing[colSums(is.na(testing))/20 < 0.97]
identical(names(training), names(testing))
check <- data.frame(names(training), names(testing))
check
inTrain <- createDataPartition(training$classe, p = 0.75, List = FLASE)
inTrain <- createDataPartition(training$classe, p = 0.75, List = FALSE)
inTrain <- createDataPartition(training$classe, p = 0.75, list = FALSE)
nTrain <- training[index,]
nTrain <- training[inTrain,]
nTest <- training[-inTrain,]
modFit <- train(classe ~ ., method = "rpart", data = nTrain)
prediction <- predict(modFit, newdata = nTest)
confusionMatrix(prediction, nTest$classe)
cm <- confusionMatrix(prediction, nTest$classe)
cm$overall
rFit <- randomForest(classe ~ ., data = nTrain)
prediction <- predict(rFit, newdata = nTest)
cm <- confusionMatrix(prediction, nTest$classe)
cm$overall
cm
prediction <- predict(rFit, newdata = testing)
prediction <- predict(rFit, newdata = testing[,-60])
exam <- testing[,-60]
prediction <- predict(rFit, newdata = exam)
str(nTrain)
exam$magnet_dumbbell_z <- num(exam$magnet_dumbbell_z)
exam$magnet_dumbbell_z <- as.numeric(exam$magnet_dumbbell_z)
exam$magnet_forearm_z <- as.numeric(exam$magnet_forearm_z)
exam$magnet_forearm_y <- as.numeric(exam$magnet_forearm_y)
prediction <- predict(rFit, newdata = exam)
exam$classe <- rep("A", times = 20)
prediction <- predict(rFit, newdata = exam)
class(rFit)
prediction <- predict.train(rFit, newdata = exam)
exam$classe <- factor(exam$classe, levels = c(1,2,3,4,5))
table(exam$classe)
exam$classe <- rep("A", times = 20)
exam$classe <- factor(exam$classe, levels = c("A","B","C","D","E"))
table(exam$classe)
exam$new_window <- factor(exam$new_window, levels = c("no","yes"))
table(exam$new_window)
prediction <- predict(rFit, newdata = exam)
str(nTrain)
class(exam)
str(nTrain$cvtd_timestamp)
exam$cvtd_timestamp <- factor(exam$cvtd_timestamp, levels = 20)
lv <- str(nTrain$cvtd_timestamp)
lv <- unique(nTrain$cvtd_timestamp)
length(lv)
lv
exam$cvtd_timestamp <- factor(testing$cvtd_timestamp, levels = lv)
prediction <- predict(rFit, newdata = exam)
prediction
exam$classe <- rep("B", times = 20)
exam$classe <- factor(exam$classe, levels = c("A","B","C","D","E"))
table(exam$classe)
prediction <- predict(rFit, newdata = exam)
prediction
pre <- predict(rFit, newdata = exam)
pre
exam <- exam[,-60]
pre <- predict(rFit, newdata = exam)
pre
rfFit <- randomForest(classe ~ ., data = nTrain)
rfP <- predict(rfFit, newdata = nTest)
table(rfp)
table(rfP)
rfP <- predict(rfFit, newdata = exam)
table(rfP)
newTrain <- nTrain[,-5]
newTest <- nTest[,-5]
newTest <- nTest[,-6]
tormv <- c(5,6)
table(nTrain$classe)
newTest <- nTest[,-tormv]
newTrain <- nTrain[,-tormv]
rfFit <- randomForest(classe ~ ., data = newTrain)
rfP <- predict(rfFit, newdata = newTest)
cm <- confusionMatrix(rfP, newTest$classe)
cm$overall
exam <- exam[,-tormv]
rfP <- predict(rfFit, newdata = exam)
table(rfp)
table(rfP)
tormv <- c(1,2,3,4,5,6)
newTest <- nTest[,-tormv]
newTrain <- nTrain[,-tormv]
rfFit <- randomForest(classe ~ ., data = newTrain)
rfP <- predict(rfFit, newdata = newTest)
cm <- confusionMatrix(rfP, newTest$classe)
cm$overall
rmv <- c(1,2,3,4)
exam <- exam[,-rmv]
rfP <- predict(rfFit, newdata = exam)
rfP
rfFit$err.rate
rfFit$ntree
cm$overall
modFit$results
q()
